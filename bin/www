const app = require("../app");
const debug = require("debug")("server:server");
const http = require("http");

const normalizePort = val => {
  const port = parseInt(val, 10);

  if (isNaN(port)) return val;
  if (port >= 0) return port;

  return false;
};

const port = normalizePort(process.env.PORT || "3000");

app.set("port", port);

const server = http.createServer(app);

server.listen(port);

function onError(error) {
  if (error.syscall !== "listen") throw error;

  const bind = typeof port === "string" ? `pipe ${port}` : `port ${port}`;

  switch (error.code) {
    case "EACCES":
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

server.on("error", onError);

function onListening() {
  const address = server.address();

  const bind =
    typeof address === "string" ? `pipe ${address}` : `port ${address.port}`;

  debug(`Listening on ${bind}`);
}

server.on("listening", onListening);
